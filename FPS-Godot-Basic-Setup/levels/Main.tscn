[gd_scene load_steps=21 format=3 uid="uid://b1yleqbb8tc7x"]

[ext_resource type="PackedScene" uid="uid://btv0a42cgxt8g" path="res://levels/WE_test.tscn" id="1_ntnxr"]
[ext_resource type="Material" uid="uid://cn1gsy15bkaff" path="res://materials/grid.tres" id="2_lbxsr"]
[ext_resource type="Texture2D" uid="uid://ivvpsi314b34" path="res://textures/grid.jpg" id="3_3vw7n"]
[ext_resource type="PackedScene" uid="uid://c3ffql15mo0aj" path="res://Player/Player.tscn" id="4_vmibe"]
[ext_resource type="PackedScene" uid="uid://bk877ag5jqb1e" path="res://Interactable/Pickable.tscn" id="5_3vw7n"]
[ext_resource type="PackedScene" uid="uid://bcr6ws5yna40e" path="res://HUD/HUD.tscn" id="6_vmibe"]
[ext_resource type="PackedScene" uid="uid://c7xlv1gunoh8o" path="res://PNG/PNG.tscn" id="7_vmibe"]

[sub_resource type="BoxMesh" id="BoxMesh_gd0ev"]
material = ExtResource("2_lbxsr")
size = Vector3(20, 0.5, 20)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_oahyi"]
data = PackedVector3Array(-10, 0.25, 10, 10, 0.25, 10, -10, -0.25, 10, 10, 0.25, 10, 10, -0.25, 10, -10, -0.25, 10, 10, 0.25, -10, -10, 0.25, -10, 10, -0.25, -10, -10, 0.25, -10, -10, -0.25, -10, 10, -0.25, -10, 10, 0.25, 10, 10, 0.25, -10, 10, -0.25, 10, 10, 0.25, -10, 10, -0.25, -10, 10, -0.25, 10, -10, 0.25, -10, -10, 0.25, 10, -10, -0.25, -10, -10, 0.25, 10, -10, -0.25, 10, -10, -0.25, -10, 10, 0.25, 10, -10, 0.25, 10, 10, 0.25, -10, -10, 0.25, 10, -10, 0.25, -10, 10, 0.25, -10, -10, -0.25, 10, 10, -0.25, 10, -10, -0.25, -10, 10, -0.25, 10, 10, -0.25, -10, -10, -0.25, -10)

[sub_resource type="Shader" id="Shader_cwof1"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.dev4's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = (albedo.rgb * albedo_tex.r) + albedo_tex.g + albedo_tex.b;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = (1.0 - albedo_tex.g) * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0racc"]
render_priority = 0
shader = SubResource("Shader_cwof1")
shader_parameter/albedo = Color(0.937255, 1, 0, 1)
shader_parameter/texture_albedo = ExtResource("3_3vw7n")
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.5
shader_parameter/metallic_texture_channel = Vector4(0, 0, 0, 0)
shader_parameter/texture_roughness = ExtResource("3_3vw7n")
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv1_offset = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_xc4gq"]
material = SubResource("ShaderMaterial_0racc")
size = Vector3(2, 2, 2)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_vp4dy"]
data = PackedVector3Array(-1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_62u37"]
render_priority = 0
shader = SubResource("Shader_cwof1")
shader_parameter/albedo = Color(0, 0.67451, 0, 1)
shader_parameter/texture_albedo = ExtResource("3_3vw7n")
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.5
shader_parameter/metallic_texture_channel = Vector4(0, 0, 0, 0)
shader_parameter/texture_roughness = ExtResource("3_3vw7n")
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv1_offset = Vector3(1, 0.5, 0.5)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="PrismMesh" id="PrismMesh_rutao"]
material = SubResource("ShaderMaterial_62u37")
left_to_right = 0.0
size = Vector3(8, 2, 2)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_j6kcl"]
data = PackedVector3Array(-4, 1, 1, 4, -1, 1, -4, -1, 1, -4, 1, -1, -4, -1, -1, 4, -1, -1, -4, 1, 1, -4, 1, -1, 4, -1, 1, -4, 1, -1, 4, -1, -1, 4, -1, 1, -4, 1, -1, -4, 1, 1, -4, -1, -1, -4, 1, 1, -4, -1, 1, -4, -1, -1, -4, -1, 1, 4, -1, 1, -4, -1, -1, 4, -1, 1, 4, -1, -1, -4, -1, -1)

[sub_resource type="PhysicsMaterial" id="PhysicsMaterial_vmibe"]
friction = 0.0

[sub_resource type="SphereMesh" id="SphereMesh_bvijt"]

[sub_resource type="SphereShape3D" id="SphereShape3D_3mabw"]
radius = 0.506237

[sub_resource type="NavigationMesh" id="NavigationMesh_vmibe"]
vertices = PackedVector3Array(-2.54517, -0.873063, -7.17072, -1.04517, -0.873063, -7.17072, -1.04517, -0.873063, -8.67072, -9.29517, -0.873063, -8.67072, 2.70483, -0.873063, -3.92072, 1.20483, -0.873063, -3.92072, 0.454834, -0.873063, -2.92072, 2.70483, -0.873063, 0.329285, 8.70483, -0.873063, -1.92072, 7.20483, -0.873063, -1.92072, 7.20483, -0.873063, 0.329285, 8.70483, -0.873063, 9.32928, 6.45483, -0.873063, 1.07928, -2.54517, -0.873063, -2.92072, 3.45483, -0.873063, 1.07928, -3.29517, -0.873063, -6.42072, -9.29517, -0.873063, 9.32928, -3.29517, -0.873063, -3.67072, 0.454834, -0.873063, -7.17072, 3.45483, -0.873063, -5.17072, 1.20483, -0.873063, -6.42072, 6.45483, -0.873063, -5.17072, 7.20483, -0.873063, -4.42072, 8.70483, -0.873063, -8.67072, 4.70483, 1.12694, -3.17072, 4.70483, 1.12694, -0.920715, 5.20483, 1.12694, -0.920715, 5.20483, 1.12694, -3.17072)
polygons = [PackedInt32Array(1, 0, 2), PackedInt32Array(2, 0, 3), PackedInt32Array(5, 4, 6), PackedInt32Array(6, 4, 7), PackedInt32Array(9, 8, 10), PackedInt32Array(10, 8, 11), PackedInt32Array(12, 10, 11), PackedInt32Array(13, 6, 7), PackedInt32Array(14, 12, 11), PackedInt32Array(3, 0, 15), PackedInt32Array(7, 14, 13), PackedInt32Array(13, 14, 11), PackedInt32Array(13, 11, 16), PackedInt32Array(3, 15, 17), PackedInt32Array(17, 13, 3), PackedInt32Array(3, 13, 16), PackedInt32Array(18, 1, 2), PackedInt32Array(4, 5, 19), PackedInt32Array(19, 5, 20), PackedInt32Array(21, 23, 22), PackedInt32Array(9, 22, 8), PackedInt32Array(8, 22, 23), PackedInt32Array(19, 20, 18), PackedInt32Array(18, 2, 19), PackedInt32Array(19, 2, 21), PackedInt32Array(21, 2, 23), PackedInt32Array(27, 26, 24), PackedInt32Array(24, 26, 25)]
agent_radius = 1.0

[node name="Node3D" type="Node3D"]

[node name="WorldEnvironment" parent="." instance=ExtResource("1_ntnxr")]

[node name="Png" parent="." node_paths=PackedStringArray("target") instance=ExtResource("7_vmibe")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3.16823, 0.916469, 3.32069)
target = NodePath("../Player")

[node name="Floor" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.25, 0)
mesh = SubResource("BoxMesh_gd0ev")

[node name="StaticBody3D" type="StaticBody3D" parent="Floor"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Floor/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_oahyi")

[node name="Box" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1, 1, -5)
mesh = SubResource("BoxMesh_xc4gq")

[node name="StaticBody3D" type="StaticBody3D" parent="Box"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Box/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_vp4dy")

[node name="Ramp" type="MeshInstance3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 5, 0, 0)
mesh = SubResource("PrismMesh_rutao")
skeleton = NodePath("../Box")

[node name="StaticBody3D" type="StaticBody3D" parent="Ramp"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Ramp/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_j6kcl")

[node name="Ball" type="RigidBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2.72632, 2.24392, 5.32721)
mass = 0.1
physics_material_override = SubResource("PhysicsMaterial_vmibe")
continuous_cd = true

[node name="MeshInstance3D" type="MeshInstance3D" parent="Ball"]
material_override = ExtResource("2_lbxsr")
mesh = SubResource("SphereMesh_bvijt")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Ball"]
shape = SubResource("SphereShape3D_3mabw")

[node name="Pickable" parent="Ball" instance=ExtResource("5_3vw7n")]

[node name="Hud" parent="." instance=ExtResource("6_vmibe")]

[node name="Player" parent="." instance=ExtResource("4_vmibe")]

[node name="NavigationRegion3D" type="NavigationRegion3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.18901, 0)
navigation_mesh = SubResource("NavigationMesh_vmibe")

[node name="CSGBox3D" type="CSGBox3D" parent="NavigationRegion3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.241089, -1.51961, 0.294586)
visible = false
size = Vector3(20.1082, 0.706909, 19.9306)

[node name="CSGBox3D2" type="CSGBox3D" parent="NavigationRegion3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.981889, -0.148944, -4.97342)
use_collision = true
size = Vector3(2.16797, 2.01221, 2.06982)

[node name="CSGBox3D3" type="CSGBox3D" parent="NavigationRegion3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.99483, -0.148944, -2.00777)
use_collision = true
size = Vector3(2.16797, 2.01221, 4.0564)
